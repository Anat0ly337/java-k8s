package com.ll.exam.app10.API;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.io.IOException;import java.util.Map;import java.util.Optional;import java.util.Random;import java.util.Set;@RestController@RequestMapping("/api/mp3")public class ResourceServer {    private Mp3Repo mp3Repo;    @GetMapping("/{id}")    public ResponseEntity<?> getMp3FileById(@PathVariable Long id) {        return mp3Repo.findById(id)            .map(ResponseEntity::ok)            .orElse(ResponseEntity.notFound().build());    }    @PostMapping(consumes = "audio/mpeg")    public ResponseEntity<?> uploadMp3File(@RequestParam("file") MultipartFile file) {        if (!file.getResource().exists()) {            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);        }        try {            Mp3File mp3File = mp3Repo.save(new Mp3File(file.getName(), file.getBytes()));            return new ResponseEntity<>(mp3File.getId(), HttpStatus.CREATED);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);        }    }    @PutMapping("/{id}")    public ResponseEntity<?> updateMp3File(@PathVariable Long id, @RequestParam("file") MultipartFile file)        throws IOException {        return Optional.of(mp3Repo.save(new Mp3File(id, file.getName(), file.getBytes())))            .map(ResponseEntity::ok)            .orElse(ResponseEntity.badRequest().build());    }    @DeleteMapping("resources/{id}")    public ResponseEntity<?> deleteMp3File(@PathVariable Long id) {        mp3Repo.deleteById(id);        return new ResponseEntity<>(Set.of(id), HttpStatus.OK);    }}